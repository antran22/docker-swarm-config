version: '3.8'

services:

  traefik:
    image: traefik:2.6.6
    ports:
      - mode: host 
        protocol: tcp 
        published: 80
        target: 80

      - mode: host 
        protocol: tcp 
        published: 443
        target: 443

      - mode: host 
        protocol: udp
        published: 8443
        target: 8443

      - mode: host 
        protocol: tcp 
        published: 22
        target: 22

    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
        - traefik.http.middlewares.internal-ip-whitelist.ipwhitelist.sourcerange=192.168.0.0/16,172.16.0.0/12
        - traefik.http.middlewares.test-ipwhitelist.ipwhitelist.ipstrategy.depth=1
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        # - traefik.http.routers.traefik-public-http.rule=Host(`traefik.ops.youngit.org`)
        # - traefik.http.routers.traefik-public-http.entrypoints=http
        # - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth,internal-ip-whitelist
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode

      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entrypoints.http.http.redirections.entrypoint.scheme=https

      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certresolver=le

      - --entrypoints.ssh.address=:22

      - --entrypoints.rtc.address=:8443/udp


      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${CF_API_EMAIL}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.dnschallenge.resolvers[0]=1.1.1.1:53
      - --certificatesresolvers.le.acme.dnschallenge.resolvers[1]=1.0.0.1:53
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      # Enable the Dashboard and API
      - --api
    networks:
      - traefik-public
    env_file:
      - .env
    environment:
      CF_API_KEY_FILE: /run/secrets/cf_api_key
    secrets:
       - cf_api_key

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:

secrets:
  cf_api_key:
    external: true
    name: traefik_cloudflare_api_key

networks:
  traefik-public:
    external: true
    name: traefik-public
    driver: overlay
