version: "3.8"
services:
  outline:
    image: outlinewiki/outline
    command: sh -c "yarn sequelize:migrate --env production-ssl-disabled && yarn start"
    env_file: ./.env
    networks:
      default:
      traefik-public:
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public

        - traefik.http.routers.${STACK_NAME}-http.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-http.middlewares=https-redirect

        - traefik.http.routers.${STACK_NAME}-https.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-https.tls=true
        - traefik.http.routers.${STACK_NAME}-https.tls.certresolver=le

        - traefik.http.services.${STACK_NAME}.loadbalancer.server.port=3000

  redis:
    image: redis
    env_file: ./.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3
    networks:
      default:

  postgres:
    image: postgres
    env_file: ./.env
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/pg_isready"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      placement:
        constraints:
          - node.labels.data == true
    networks:
      default:

volumes:
  database-data:

networks:
  traefik-public:
    external: true
    name: traefik-public

  default:
    driver: overlay
